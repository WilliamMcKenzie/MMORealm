[gd_scene load_steps=8 format=2]

[ext_resource path="res://Assets/items/items_8x8.png" type="Texture" id=1]
[ext_resource path="res://Assets/skin.png" type="Texture" id=2]
[ext_resource path="res://Scenes/SupportScenes/UI/CharacterSelection/CharacterButton.gd" type="Script" id=3]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(0, 0, 0, 1);
uniform float line_thickness : hint_range(0, 10) = 0.25;
uniform float glow_thickness : hint_range(0, 20) = 4;
uniform vec4 glow_color : hint_color = vec4(0, 0, 0, 0.1);

void fragment() {
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    vec2 glow_size = TEXTURE_PIXEL_SIZE * glow_thickness;
    
    float outline = 0.0;
    outline += texture(TEXTURE, UV + vec2(-size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
    outline = min(outline, 1.0);

    float glow = 0.0;
    for (float i = 1.0; i <= glow_thickness; i++) {
        vec2 offset = TEXTURE_PIXEL_SIZE * i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, offset.y)).a / i;
    }
    glow = min(glow / glow_thickness, 1.0) - outline;

    vec4 color = texture(TEXTURE, UV);
    vec4 outline_color = mix(color, line_color, outline - color.a);
    vec4 glow_color_mixed = mix(outline_color, glow_color, glow * (1.0 - color.a));
    
    COLOR = glow_color_mixed;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.25
shader_param/glow_thickness = 4.0
shader_param/glow_color = Color( 0, 0, 0, 0.1 )

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(0, 0, 0, 1);
uniform float line_thickness : hint_range(0, 10) = 0.25;
uniform float glow_thickness : hint_range(0, 20) = 4;
uniform vec4 glow_color : hint_color = vec4(0, 0, 0, 0.1);

void fragment() {
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    vec2 glow_size = TEXTURE_PIXEL_SIZE * glow_thickness;
    
    float outline = 0.0;
    outline += texture(TEXTURE, UV + vec2(-size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
    outline = min(outline, 1.0);

    float glow = 0.0;
    for (float i = 1.0; i <= glow_thickness; i++) {
        vec2 offset = TEXTURE_PIXEL_SIZE * i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, offset.y)).a / i;
    }
    glow = min(glow / glow_thickness, 1.0) - outline;

    vec4 color = texture(TEXTURE, UV);
    vec4 outline_color = mix(color, line_color, outline - color.a);
    vec4 glow_color_mixed = mix(outline_color, glow_color, glow * (1.0 - color.a));
    
    COLOR = glow_color_mixed;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.25
shader_param/glow_thickness = 4.0
shader_param/glow_color = Color( 0, 0, 0, 0.1 )

[node name="CharacterButton" type="Node2D"]
position = Vector2( -2, 0 )
script = ExtResource( 3 )

[node name="Button" type="Button" parent="."]
margin_left = 125.0
margin_top = 103.0
margin_right = 396.0
margin_bottom = 207.0

[node name="Character" type="Sprite" parent="Button"]
material = SubResource( 4 )
position = Vector2( 44, 55 )
scale = Vector2( 7, 7 )
texture = ExtResource( 2 )
hframes = 4
vframes = 4

[node name="ResizeContainer" type="Node2D" parent="Button"]
scale = Vector2( 1.5, 1.5 )

[node name="Level" type="Label" parent="Button/ResizeContainer"]
margin_left = 61.3333
margin_top = 6.66666
margin_right = 238.333
margin_bottom = 20.6667
text = "Piker - Level 1"

[node name="ItemsResizeContainer" type="Node2D" parent="Button"]
position = Vector2( -50, -11 )
scale = Vector2( 1.3, 1.3 )

[node name="Ring" type="Sprite" parent="Button/ItemsResizeContainer"]
material = SubResource( 2 )
position = Vector2( 223, 63 )
scale = Vector2( 3, 3 )
texture = ExtResource( 1 )
hframes = 26
vframes = 26
frame = 130

[node name="Ability" type="Sprite" parent="Button/ItemsResizeContainer"]
material = SubResource( 2 )
position = Vector2( 148, 63 )
scale = Vector2( 3, 3 )
texture = ExtResource( 1 )
hframes = 26
vframes = 26
frame = 78

[node name="Armor" type="Sprite" parent="Button/ItemsResizeContainer"]
material = SubResource( 2 )
position = Vector2( 186, 63 )
scale = Vector2( 3, 3 )
texture = ExtResource( 1 )
hframes = 26
vframes = 26
frame = 104

[node name="Weapon" type="Sprite" parent="Button/ItemsResizeContainer"]
material = SubResource( 2 )
position = Vector2( 114, 63 )
scale = Vector2( 3, 3 )
texture = ExtResource( 1 )
hframes = 26
vframes = 26
frame = 52
