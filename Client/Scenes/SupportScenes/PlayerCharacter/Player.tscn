[gd_scene load_steps=55 format=2]

[ext_resource path="res://Resources/ColorGear.gdshader" type="Shader" id=1]
[ext_resource path="res://Scenes/SupportScenes/PlayerCharacter/Player.gd" type="Script" id=2]
[ext_resource path="res://Assets/items/items_8x8.png" type="Texture" id=3]
[ext_resource path="res://Assets/characters/characters_8x8.png" type="Texture" id=4]
[ext_resource path="res://Scenes/SupportScenes/PlayerCharacter/ColorGear.gd" type="Script" id=5]
[ext_resource path="res://Scenes/SupportScenes/UI/Joystick/move_Joystick.tscn" type="PackedScene" id=7]
[ext_resource path="res://Scenes/SupportScenes/UI/Joystick/attack_joystick.tscn" type="PackedScene" id=8]
[ext_resource path="res://Scenes/SupportScenes/UI/Joystick/MoveJoystick.gd" type="Script" id=9]
[ext_resource path="res://Scenes/SupportScenes/UI/Joystick/AttackJoystick.gd" type="Script" id=10]
[ext_resource path="res://Assets/ui/button.png" type="Texture" id=11]

[sub_resource type="AnimationNodeAnimation" id=40]
animation = "attack_down"

[sub_resource type="AnimationNodeAnimation" id=41]
animation = "attack_up"

[sub_resource type="AnimationNodeAnimation" id=42]
animation = "attack_right"

[sub_resource type="AnimationNodeAnimation" id=43]
animation = "attack_left"

[sub_resource type="AnimationNodeBlendSpace2D" id=34]
blend_point_0/node = SubResource( 40 )
blend_point_0/pos = Vector2( 0, 0.5 )
blend_point_1/node = SubResource( 41 )
blend_point_1/pos = Vector2( 0, -0.5 )
blend_point_2/node = SubResource( 42 )
blend_point_2/pos = Vector2( 0.5, 0 )
blend_point_3/node = SubResource( 43 )
blend_point_3/pos = Vector2( -0.5, 0 )

[sub_resource type="AnimationNodeAnimation" id=44]
animation = "idle_left"

[sub_resource type="AnimationNodeAnimation" id=45]
animation = "idle_down"

[sub_resource type="AnimationNodeAnimation" id=46]
animation = "idle_right"

[sub_resource type="AnimationNodeAnimation" id=47]
animation = "idle_up"

[sub_resource type="AnimationNodeBlendSpace2D" id=15]
blend_point_0/node = SubResource( 44 )
blend_point_0/pos = Vector2( -1, 0 )
blend_point_1/node = SubResource( 45 )
blend_point_1/pos = Vector2( 0, 1 )
blend_point_2/node = SubResource( 46 )
blend_point_2/pos = Vector2( 1, 0 )
blend_point_3/node = SubResource( 47 )
blend_point_3/pos = Vector2( 0, -1 )
blend_mode = 1

[sub_resource type="AnimationNodeAnimation" id=48]
animation = "walk_left"

[sub_resource type="AnimationNodeAnimation" id=49]
animation = "walk_right"

[sub_resource type="AnimationNodeAnimation" id=50]
animation = "walk_down"

[sub_resource type="AnimationNodeAnimation" id=51]
animation = "walk_up"

[sub_resource type="AnimationNodeBlendSpace2D" id=23]
blend_point_0/node = SubResource( 48 )
blend_point_0/pos = Vector2( -0.5, 0 )
blend_point_1/node = SubResource( 49 )
blend_point_1/pos = Vector2( 0.5, 0 )
blend_point_2/node = SubResource( 50 )
blend_point_2/pos = Vector2( 0, 0.5 )
blend_point_3/node = SubResource( 51 )
blend_point_3/pos = Vector2( 0, -0.5 )

[sub_resource type="AnimationNodeStateMachineTransition" id=24]

[sub_resource type="AnimationNodeStateMachineTransition" id=25]

[sub_resource type="AnimationNodeStateMachineTransition" id=35]

[sub_resource type="AnimationNodeStateMachineTransition" id=36]

[sub_resource type="AnimationNodeStateMachineTransition" id=37]

[sub_resource type="AnimationNodeStateMachineTransition" id=38]

[sub_resource type="AnimationNodeStateMachine" id=16]
states/Attack/node = SubResource( 34 )
states/Attack/position = Vector2( 715, 176.042 )
states/Idle/node = SubResource( 15 )
states/Idle/position = Vector2( 635, 110 )
states/Walk/node = SubResource( 23 )
states/Walk/position = Vector2( 807, 110 )
transitions = [ "Idle", "Walk", SubResource( 24 ), "Walk", "Idle", SubResource( 25 ), "Idle", "Attack", SubResource( 35 ), "Attack", "Idle", SubResource( 36 ), "Attack", "Walk", SubResource( 37 ), "Walk", "Attack", SubResource( 38 ) ]
start_node = "Idle"
graph_offset = Vector2( 0, 31.0419 )

[sub_resource type="AnimationNodeStateMachinePlayback" id=17]

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:frame_coords")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 3 ) ]
}

[sub_resource type="Animation" id=29]
resource_name = "attack_down"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 10, 11 ]
}

[sub_resource type="Animation" id=27]
resource_name = "attack_left"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 6, 7 ]
}

[sub_resource type="Animation" id=26]
resource_name = "attack_right"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 2, 3 ]
}

[sub_resource type="Animation" id=28]
resource_name = "attack_up"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 14, 15 ]
}

[sub_resource type="Animation" id=3]
resource_name = "idle_down"
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 8 ]
}

[sub_resource type="Animation" id=5]
resource_name = "idle_left"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4 ]
}

[sub_resource type="Animation" id=6]
resource_name = "idle_right"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=7]
resource_name = "idle_up"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame_coords")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 3 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "walk_down"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 9, 8 ]
}

[sub_resource type="Animation" id=8]
resource_name = "walk_left"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 5, 4 ]
}

[sub_resource type="Animation" id=9]
resource_name = "walk_right"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 1, 0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "walk_up"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 13, 12 ]
}

[sub_resource type="ShaderMaterial" id=52]
render_priority = 1
shader = ExtResource( 1 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.0
shader_param/glow_thickness = 0.0
shader_param/glow_color = Color( 0, 0, 0, 0 )
shader_param/helmetTextureActive = false
shader_param/bodyTextureActive = false
shader_param/weaponTextureActive = false
shader_param/helmetDarkOrigin = Color( 0.788235, 0.415686, 0, 1 )
shader_param/helmetDarkNew = Color( 0.372549, 0.32549, 0.32549, 1 )
shader_param/helmetMediumOrigin = Color( 0.894118, 0.470588, 0, 1 )
shader_param/helmetMediumNew = Color( 0.423529, 0.388235, 0.388235, 1 )
shader_param/helmetLightOrigin = Color( 1, 0.52549, 0, 1 )
shader_param/helmetLightNew = Color( 0.529412, 0.458824, 0.458824, 1 )
shader_param/bodyDarkOrigin = null
shader_param/bodyDarkNew = null
shader_param/bodyMediumOrigin = Color( 0.894118, 0, 0.752941, 1 )
shader_param/bodyMediumNew = Color( 0.745098, 0.745098, 0.745098, 1 )
shader_param/bodyLightOrigin = Color( 1, 0, 0.843137, 1 )
shader_param/bodyLightNew = Color( 0.847059, 0.847059, 0.847059, 1 )
shader_param/bandOrigin = Color( 1, 0, 0.419608, 1 )
shader_param/bandNew = Color( 0.564706, 0.317647, 0.14902, 1 )
shader_param/buckleOrigin = Color( 0, 0, 0, 1 )
shader_param/buckleNew = Color( 0.509804, 0.509804, 0.509804, 1 )
shader_param/weaponOrigin = null
shader_param/weaponNew = null
shader_param/weaponSecondaryOrigin = null
shader_param/weaponSecondaryNew = null

[sub_resource type="Shader" id=53]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(0, 0, 0, 1);
uniform float line_thickness : hint_range(0, 10) = 0.25;
uniform float glow_thickness : hint_range(0, 20) = 4;
uniform vec4 glow_color : hint_color = vec4(0, 0, 0, 0.1);

void fragment() {
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    vec2 glow_size = TEXTURE_PIXEL_SIZE * glow_thickness;
    
    float outline = 0.0;
    outline += texture(TEXTURE, UV + vec2(-size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
    outline = min(outline, 1.0);

    float glow = 0.0;
    for (float i = 1.0; i <= glow_thickness; i++) {
        vec2 offset = TEXTURE_PIXEL_SIZE * i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, offset.y)).a / i;
    }
    glow = min(glow / glow_thickness, 1.0) - outline;

    vec4 color = texture(TEXTURE, UV);
    vec4 outline_color = mix(color, line_color, outline - color.a);
    vec4 glow_color_mixed = mix(outline_color, glow_color, glow * (1.0 - color.a));
    
    COLOR = glow_color_mixed;
}"

[sub_resource type="ShaderMaterial" id=54]
shader = SubResource( 53 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.25
shader_param/glow_thickness = 4.0
shader_param/glow_color = Color( 0, 0, 0, 0.1 )

[sub_resource type="Shader" id=55]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(0, 0, 0, 1);
uniform float line_thickness : hint_range(0, 10) = 0.25;
uniform float glow_thickness : hint_range(0, 20) = 4;
uniform vec4 glow_color : hint_color = vec4(0, 0, 0, 0.1);

void fragment() {
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    vec2 glow_size = TEXTURE_PIXEL_SIZE * glow_thickness;
    
    float outline = 0.0;
    outline += texture(TEXTURE, UV + vec2(-size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
    outline = min(outline, 1.0);

    float glow = 0.0;
    for (float i = 1.0; i <= glow_thickness; i++) {
        vec2 offset = TEXTURE_PIXEL_SIZE * i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, offset.y)).a / i;
    }
    glow = min(glow / glow_thickness, 1.0) - outline;

    vec4 color = texture(TEXTURE, UV);
    vec4 outline_color = mix(color, line_color, outline - color.a);
    vec4 glow_color_mixed = mix(outline_color, glow_color, glow * (1.0 - color.a));
    
    COLOR = glow_color_mixed;
}"

[sub_resource type="ShaderMaterial" id=56]
shader = SubResource( 55 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.25
shader_param/glow_thickness = 4.0
shader_param/glow_color = Color( 0, 0, 0, 0.1 )

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(0, 0, 0, 1);
uniform float line_thickness : hint_range(0, 10) = 0.25;
uniform float glow_thickness : hint_range(0, 20) = 4;
uniform vec4 glow_color : hint_color = vec4(0, 0, 0, 0.1);

void fragment() {
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    vec2 glow_size = TEXTURE_PIXEL_SIZE * glow_thickness;
    
    float outline = 0.0;
    outline += texture(TEXTURE, UV + vec2(-size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
    outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
    outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
    outline = min(outline, 1.0);

    float glow = 0.0;
    for (float i = 1.0; i <= glow_thickness; i++) {
        vec2 offset = TEXTURE_PIXEL_SIZE * i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, 0)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(0, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, -offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(-offset.x, offset.y)).a / i;
        glow += texture(TEXTURE, UV + vec2(offset.x, offset.y)).a / i;
    }
    glow = min(glow / glow_thickness, 1.0) - outline;

    vec4 color = texture(TEXTURE, UV);
    vec4 outline_color = mix(color, line_color, outline - color.a);
    vec4 glow_color_mixed = mix(outline_color, glow_color, glow * (1.0 - color.a));
    
    COLOR = glow_color_mixed;
}"

[sub_resource type="ShaderMaterial" id=58]
shader = SubResource( 57 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 0.25
shader_param/glow_thickness = 4.0
shader_param/glow_color = Color( 0, 0, 0, 0.1 )

[sub_resource type="RectangleShape2D" id=61]
extents = Vector2( 4, 4 )

[node name="player" type="KinematicBody2D"]
position = Vector2( 343, 265 )
collision_mask = 0
script = ExtResource( 2 )

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource( 16 )
anim_player = NodePath("../AnimationPlayer")
active = true
parameters/playback = SubResource( 17 )
parameters/Attack/blend_position = Vector2( 0.00158477, 0.982759 )
parameters/Idle/blend_position = Vector2( -0.274168, 0.413793 )
parameters/Walk/blend_position = Vector2( 0.99683, -0.543103 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../CharacterSprite")
anims/RESET = SubResource( 2 )
anims/attack_down = SubResource( 29 )
anims/attack_left = SubResource( 27 )
anims/attack_right = SubResource( 26 )
anims/attack_up = SubResource( 28 )
anims/idle_down = SubResource( 3 )
anims/idle_left = SubResource( 5 )
anims/idle_right = SubResource( 6 )
anims/idle_up = SubResource( 7 )
anims/walk_down = SubResource( 4 )
anims/walk_left = SubResource( 8 )
anims/walk_right = SubResource( 9 )
anims/walk_up = SubResource( 10 )

[node name="BlackBackground" type="Sprite" parent="."]
modulate = Color( 0, 0, 0, 1 )
position = Vector2( 1, -9 )
scale = Vector2( 2.29178, 5.24 )
z_index = -1000
z_as_relative = false
texture = ExtResource( 11 )

[node name="CharacterSprite" type="Sprite" parent="."]
material = SubResource( 52 )
texture = ExtResource( 4 )
hframes = 4
vframes = 4
frame = 12
region_enabled = true
region_rect = Rect2( 0, 0, 80, 40 )
script = ExtResource( 5 )

[node name="Camera2D" type="Camera2D" parent="."]
offset = Vector2( 0, -12.396 )
current = true
zoom = Vector2( 0.2, 0.2 )

[node name="PlayerUI" type="Node2D" parent="."]

[node name="Gear" type="Node2D" parent="PlayerUI"]
visible = false
position = Vector2( 0, -14 )

[node name="Ring" type="Sprite" parent="PlayerUI/Gear"]
material = SubResource( 52 )
position = Vector2( 14, 49 )
texture = ExtResource( 3 )
hframes = 26
vframes = 26

[node name="Weapon" type="Sprite" parent="PlayerUI/Gear"]
material = SubResource( 54 )
position = Vector2( -16, 49 )
texture = ExtResource( 3 )
hframes = 26
vframes = 26

[node name="Ability" type="Sprite" parent="PlayerUI/Gear"]
material = SubResource( 56 )
position = Vector2( -5.99998, 49 )
texture = ExtResource( 3 )
hframes = 26
vframes = 26

[node name="Armor" type="Sprite" parent="PlayerUI/Gear"]
material = SubResource( 58 )
position = Vector2( 4.00002, 49 )
texture = ExtResource( 3 )
hframes = 26
vframes = 26

[node name="Axis" type="Area2D" parent="."]
visible = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Axis"]
scale = Vector2( 0.9, 1.1 )
shape = SubResource( 61 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
scale = Vector2( 0.9, 1.1 )
shape = SubResource( 61 )

[node name="Joysticks" type="CanvasLayer" parent="."]

[node name="Joystick" parent="Joysticks" instance=ExtResource( 7 )]
visible = false
script = ExtResource( 9 )

[node name="Joystick2" parent="Joysticks" instance=ExtResource( 8 )]
visible = false
script = ExtResource( 10 )
